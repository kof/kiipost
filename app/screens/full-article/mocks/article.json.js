'use strict'

module.exports = {
    '_id': '53f4a88f556d274e1f2f7462',
    'url': 'http://vitalflux.com/reactjs-tutorial-add-delete-table-row-dynamically/',
    'pubDate': '2014-08-18T15:21:31.000Z',
    'title': 'ReactJS Tutorial – How to Add or Delete Table Row Dynamically',
    'summary': 'The article represents high level concepts including component design and event delegation and, demo/code samples in relation with how to add or delete a table row dynamically.',
    'description': '<p>The article represents high level concepts including component design and event delegation and, demo/code samples in relation with how to add or delete a table row dynamically. For AngularJS enthusiasts, it also presents quick differences and few similarities (so to say) as well. The UI is demonstrated on the following page: <a href=\'http://tuts-javascript.appspot.com/reactjs-add-remove-table-row\'>http://tuts-javascript.appspot.com/reactjs-add-remove-table-row</a>. Feel free to comment/suggest on any aspects of the article including concepts and code samples.</p> <p>Following is how the design is laid out:</p> <ul> <li><strong>CompanyApp</strong>: The app has a top-level component named as CompanyApp. This component is composed of following components: <ul> <li><strong>CompanyList</strong>: CompanyList component represents a list of companies and has code to render the same. <ul> <li><strong>Company</strong>: Company component represents the company and has an onClick event for removing the company.</li> </ul> </li> <li><strong>NewRow</strong>: NewRow component is used to capture the data (company information). It has an onSubmit form event to capture row submit.</li> </ul> </li> </ul> <p>From above, one thing that becomes clear is the <strong>component-oriented design</strong>. In above design, CompanyApp is the <strong>composite component</strong> that is composed of two other components named as CompanyList and NewRow. In addition, CompanyList is a <strong>composite component</strong> that is composed of list of Company components.</p> <p>This is where the power of ReactJS shows up. One could design the UI as components and, then write the code appropriately to achieve the following key objectives:</p> <ol> <li>Render the components: Watch in following code samples how the <strong>render API</strong> is defined for each component and also, the related HTML like code. <strong>For Angular enthusiast</strong>s, it may look like <strong>custom directives</strong> as there are markups on custom components.</li> <li>Handle the event based on <strong>event delegation</strong> model. Note how the event is delegated to container/parent component using <strong>callback methods</strong>.</li> </ol> <p>Following represents code samples for the above components along with key summary text.</p> <p> </p> <div> <h6>CompanyApp</h6> <p>Notice the following concepts in the code below:</p> <ul> <li>getInitialState API called to set the initial state to the default list passed to the CompanyApp component</li> <li>handleNewRowSubmit: This API is used to change the state due to addition of a new company. Note the “<strong>setState</strong>” method being called to set the new state. This ensures that UI gets updated with new data.</li> <li>handleCompanyRemove: This API is used to change the state due to removal of company from existing company list. Again, note the “<strong>setState</strong>” method invoked which ensures that UI gets updated.</li> </ul> <p><strong>For AngularJS enthusiasts</strong>, following points (differences/similarities) can be noted:</p> <ul> <li>For updating UI, all that is needed to be done is change the UI state model, companylist in the example below, and invoke <strong>“setState” method </strong>to update the UI.</li> <li>CompanyList and NewRow gives a feeling of custom directives. <img src=\'http://vitalflux.com/wp-includes/images/smilies/icon_smile.gif\' alt=\':-)\'></img> These are actually React components.</li> <li>I have to admit that I ended up<strong> writing more code</strong> to achieve the same objective in ReactJS. Also, <strong>UI code is embedded</strong> with Component’s definition. Take a look at this <a href=\'http://hello-angularjs.appspot.com/removetablerow\'>demo </a>done with AngularJS.</li> </ul> <div><table><tr><td><pre>var CompanyApp = React.createClass({ getInitialState: function() { return {companylist:this.props.companies}; }, handleNewRowSubmit: function( newcompany ) { this.setState( {companylist: this.state.companylist.concat([newcompany])} ); }, handleCompanyRemove: function( company ) {   var index = -1; var clength = this.state.companylist.length; for( var i = 0; i < clength; i++ ) { if( this.state.companylist[i].cname === company.cname ) { index = i; break; } } this.state.companylist.splice( index, 1 ); this.setState( {companylist: this.state.companylist} ); }, render: function() { var tableStyle = {width: \'100%\'}; var leftTdStyle = {width: \'50%\',padding:\'20px\',verticalAlign: \'top\'}; var rightTdStyle = {width: \'50%\',padding:\'20px\',verticalAlign: \'top\'}; return ( <table style={tableStyle}> <tr> <td style={leftTdStyle}> <CompanyList clist={this.state.companylist} onCompanyRemove={this.handleCompanyRemove}/> </td> <td style={rightTdStyle}> <NewRow onRowSubmit={this.handleNewRowSubmit}/> </td> </tr> </table> ); } });</pre></td></tr></table></div> </div> <p> </p> <div> <h6>CompanyList</h6> <p>Notice the following concepts in the code below:</p> <ul> <li>handleRemoveCompany invokes the onCompanyRemove method which invokes the <strong>callback method</strong> to pass the event upward in the hierarchy.</li> <li>render method which creates the table</li> <li>Company component which is passed the company (<strong>later accessed as this.props.company</strong>) property to create the row.</li> </ul> <div><table><tr><td><pre>var CompanyList = React.createClass({ handleCompanyRemove: function(company){ this.props.onCompanyRemove( company ); }, render: function() { var companies = []; var that = this; // TODO: Needs to find out why that = this made it work; Was getting error that onCompanyDelete is not undefined this.props.clist.forEach(function(company) { companies.push(<Company company={company} onCompanyDelete={that.handleCompanyRemove} /> ); }); return ( <div> <h3>List of Companies</h3> <table className=\'table table-striped\'> <thead><tr><th>Company Name</th><th>Employees</th><th>Head Office</th><th>Action</th></tr></thead> <tbody>{companies}</tbody> </table> </div> ); } });</pre></td></tr></table></div> </div> <p> </p> <div> <h6>Company</h6> <p>Notice the following concepts in the code below:</p> <ul> <li>handleRemoveCompany invokes the onCompanyDelete method which invokes the <strong>callback method</strong> to pass the event upward in the hierarchy to remove or delete the existing company from the company list. <strong>Remember the event delegation model</strong>.</li> </ul> <div><table><tr><td><pre>var Company = React.createClass({ handleRemoveCompany: function() { this.props.onCompanyDelete( this.props.company ); return false; }, render: function() { return ( <tr> <td>{this.props.company.cname}</td> <td>{this.props.company.ecount}</td> <td>{this.props.company.hoffice}</td> <td><input type=\'button\' className=\'btn btn-primary\' value=\'Remove\' onClick={this.handleRemoveCompany}/></td> </tr> ); } });</pre></td></tr></table></div> </div> <p> </p> <div> <h6>NewRow</h6> <p>Notice the following concepts in the code below:</p> <ul> <li>handleSubmit reads/captures the input and invokes the onRowSubmit method which invokes the <strong>callback method</strong> to pass the event upward in the hierarchy to add a new company (row) in the table. <strong>Remember the event delegation model.</strong></li> </ul> <div><table><tr><td><pre>var NewRow = React.createClass({ handleSubmit: function() { var cname = this.refs.cname.getDOMNode().value; var ecount = this.refs.ecount.getDOMNode().value; var hoffice = this.refs.hoffice.getDOMNode().value; var newrow = {cname: cname, ecount: ecount, hoffice: hoffice }; this.props.onRowSubmit( newrow );   this.refs.cname.getDOMNode().value = \'\'; this.refs.ecount.getDOMNode().value = \'\'; this.refs.hoffice.getDOMNode().value = \'\'; return false; }, render: function() { var inputStyle = {padding:\'12px\'} return ( <div className=\'well\'> <h3>Add A Company</h3> <form onSubmit={this.handleSubmit}> <div className=\'input-group input-group-lg\' style={inputStyle}> <input type=\'text\' className=\'form-control col-md-8\' placeholder=\'Company Name\' ref=\'cname\'/> </div> <div className=\'input-group input-group-lg\' style={inputStyle}> <input type=\'text\' className=\'form-control col-md-8\' placeholder=\'Employee Count\' ref=\'ecount\'/> </div> <div className=\'input-group input-group-lg\' style={inputStyle}> <input type=\'text\' className=\'form-control col-md-8\' placeholder=\'Headoffice\' ref=\'hoffice\'/> </div> <div className=\'input-group input-group-lg\' style={inputStyle}> <input type=\'submit\' className=\'btn btn-primary\' value=\'Add Company\'/> </div> </form></pre></td></tr></table></div> <p>); } });</p> <p>The code could be found on this <a href=\'https://github.com/eajitesh/Hello-ReactJS/blob/master/add-remove-table-row.html\'>Hello ReactJS – github page.</a> Feel free to comment on the design or event delegation model as I am also in the learning phase at this point.</p> <p> </p> <p> </p> </div> <a></a> <div><div><section><div><a href=\'http://www.vitalflux.com/author/vitalflux\' title=\'Ajitesh Kumar\'><img src=\'http://vitalflux.com/wp-content/uploads/gravatar/ajitesh.jpg\'></img></a></div><div>Ajitesh is passionate about various different technologies including programming languages such as Java/JEE, Javascript, PHP, .NET, C/C++, mobile programming languages etc and, computing fundamentals such as application security, cloud computing, API, mobile apps, google glass, big data etc.</p><p>Follow him on <a href=\'http://www.twitter.com/eajitesh\'>Twitter</a> and <a href=\'https://plus.google.com/103219280758106839440?rel=author\'>Google+</a>.</div> </section><section><div><a href=\'http://www.vitalflux.com/author/vitalflux\' title=\'Ajitesh Kumar\'><img src=\'http://vitalflux.com/wp-content/uploads/gravatar/ajitesh.jpg\'></img></a></div><div><h4>Latest posts by Ajitesh Kumar (<a href=\'http://vitalflux.com/author/vitalflux/\'>see all</a>)</h4></div> </section></div> </div>',
    'score': 50,
    'feedId': '52bb0e999d084c0200000065',
    'enclosures': [],
    'images': [{
        'url': 'http://vitalflux.com/wp-content/uploads/2014/08/add_remove_table_row_reactjs.png',
        'width': 0,
        'height': 0
    }],
    'categories': ['how-to', 'javascript', 'opinion'],
    'tags': ['how-to', 'javascript', 'opinion', 'ui', 'newrow', 'delegation model', 'company', 'code samples', 'existing company', 'quot', 'component', 'companylist', 'var', 'input', 'code', 'event', 'classname', 'div', 'function', 'method', 'state', 'props', 'table', 'cname', 'ref']
}
